name: Build and Deploy to AKS
on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  RESOURCEGROUPNAME: "linkerd-test-rg"
  LOCATION: "East US"
  SUBSCRIPTIONID: "9ed522a4-bb13-45cb-aa57-225f0d31468d"
  IMAGENAME: "linkerdtestabf6"
  REGISTRYSKU: "Standard"
  REGISTRYNAME: "linkerdtestacr"
  REGISTRYLOCATION: "South Central US"
  CLUSTERNAME: "linkerd-test"
  APPINSIGHTSLOCATION: "East US"
  CLUSTERLOCATION: "East US"
  AGENTCOUNT: "1"
  AGENTVMSIZE: "Standard_B2s"
  KUBERNETESVERSION: 1.17.13
  OMSLOCATION: "East US"
  OMSWORKSPACENAME: "linkerdtest4a1c"
  HTTPSAPPLICATIONROUTINGENABLED: false
  KUBERNETESAPI: "apps/v1"
  NAMESPACE: "linkerdtest5645"

jobs:
  build:
    name: Build and push image to container registry
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create AKS Cluster
      uses: azure/arm-deploy@v1
      id: deploy
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/aks-template.json
        parameters: clusterName="${{ env.CLUSTERNAME }}" appInsightsLocation="${{ env.APPINSIGHTSLOCATION }}" clusterLocation="${{ env.CLUSTERLOCATION }}" agentCount="${{ env.AGENTCOUNT }}" agentVMSize="${{ env.AGENTVMSIZE }}" kubernetesVersion="${{ env.KUBERNETESVERSION }}" omsLocation="${{ env.OMSLOCATION }}" omsWorkspaceName="${{ env.OMSWORKSPACENAME }}" httpApplicationRoutingEnabled="${{ env.HTTPSAPPLICATIONROUTINGENABLED }}"  dnsPrefix="${{ env.CLUSTERNAME }}"

    - name: Create ACR
      id: createACR
      run: |
          az acr create -n ${{ env.REGISTRYNAME }} -g ${{ env.RESOURCEGROUPNAME }} --location "${{env.REGISTRYLOCATION}}" --sku ${{env.REGISTRYSKU}} --admin-enabled
          echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username`"
          echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"
          echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value`"

    - name: Build and push image to ACR
      id: build-image
      run: |
        echo "::add-mask::${{ steps.createACR.outputs.acr_password }}"
        docker login ${{ env.REGISTRYNAME }}.azurecr.io --username ${{ steps.createACR.outputs.acr_username }} --password ${{ steps.createACR.outputs.acr_password }}
        docker build "$GITHUB_WORKSPACE/Application" -f  "Application/Dockerfile" -t ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
 
  deploy:
    name: Deploy application to AKS
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS Credentials
      id: getContext
      run: |
          az aks get-credentials --resource-group ${{ env.RESOURCEGROUPNAME }} --name ${{ env.CLUSTERNAME }} --file $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep ${{ env.NAMESPACE }} | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace ${{ env.NAMESPACE }}`
        fi

    - name: Get ACR credentials
      id: getACRCred
      run: |
           echo "::set-output name=acr_username::`az acr credential show -n ${{ env.REGISTRYNAME }} --query username | xargs`"
           echo "::set-output name=acr_password::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"
           echo "::add-mask::`az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value | xargs`"

    - uses: azure/k8s-create-secret@v1
      with:
        namespace: ${{ env.NAMESPACE }}
        container-registry-url: ${{ env.REGISTRYNAME }}.azurecr.io
        container-registry-username: ${{ steps.getACRCred.outputs.acr_username }}
        container-registry-password: ${{ steps.getACRCred.outputs.acr_password }}
        secret-name: ${{ env.CLUSTERNAME }}dockerauth

    - name: Fetch Application insights key
      id: GetAppInsightsKey
      run: |
        echo "::set-output name=AIKey::`az resource show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --resource-type "Microsoft.Insights/components" --query "properties.InstrumentationKey" -o tsv`"
        echo "::add-mask::`az resource show -g ${{ env.RESOURCEGROUPNAME }} -n ${{ env.CLUSTERNAME }} --resource-type "Microsoft.Insights/components" --query "properties.InstrumentationKey" -o tsv`"

    - name: Install Helm
      uses: Azure/setup-helm@v1

    - name : Install step and generate certificates
      run: | 
        wget https://github.com/smallstep/cli/releases/download/v0.15.3/step-cli_0.15.3_amd64.deb
        sudo dpkg -i step-cli_0.15.3_amd64.deb
        step certificate create root.linkerd.cluster.local ca.crt ca.key --profile root-ca --no-password --insecure
        step certificate create identity.linkerd.cluster.local issuer.crt issuer.key --profile intermediate-ca --not-after 8760h --no-password --insecure --ca ca.crt --ca-key ca.key

    - name : Install linkerd chart
      run: | 
        kubectl get pod --all-namespaces
        helm ls --all-namespaces
        helm repo add linkerd https://helm.linkerd.io/stable
        exp=$(date -d '+8760 hour' +"%Y-%m-%dT%H:%M:%SZ")
        helm upgrade -i --atomic --debug linkerd2 --set-file global.identityTrustAnchorsPEM=ca.crt --set-file identity.issuer.tls.crtPEM=issuer.crt --set-file identity.issuer.tls.keyPEM=issuer.key --set identity.issuer.crtExpiry=$exp linkerd/linkerd2
        kubectl get pod --all-namespaces
        helm ls --all-namespaces
        
    - name : Install application chart
      run: | 
        kubectl get pod --all-namespaces
        helm ls --all-namespaces
        helm upgrade -i --atomic --namespace ${{ env.NAMESPACE }} --debug --set image.repository="${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}" --set image.tag=${{ github.sha }} --set imagePullSecrets={${{ env.CLUSTERNAME }}dockerauth} --set applicationInsights.InstrumentationKey=${{ steps.GetAppInsightsKey.outputs.AIKey }} --set apiVersion=${{ env.KUBERNETESAPI }} --set extensionApiVersion=${{ env.KUBERNETESAPI }} sapp ./Application/charts/sampleapp
        kubectl get pod --all-namespaces
        helm ls --all-namespaces
        
#     - uses: azure/k8s-bake@v1
#       id: bakeManifests
#       with:
#         renderEngine: 'helm'
#         helmChart: './Application/charts/sampleapp' 
#         overrideFiles: './Application/charts/sampleapp/values.yaml'
#         overrides: |
#             image.repository:${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}
#             image.tag:${{ github.sha }}
#             imagePullSecrets:{${{ env.CLUSTERNAME }}dockerauth}
#             applicationInsights.InstrumentationKey:${{ steps.GetAppInsightsKey.outputs.AIKey }}
#             apiVersion:${{ env.KUBERNETESAPI }}
#             extensionApiVersion:${{ env.KUBERNETESAPI }}
#         helm-version: 'latest' 
#         silent: 'true'

#     - uses: azure/k8s-deploy@v1
#       with:
#         namespace: ${{ env.NAMESPACE }}
#         manifests: ${{ steps.bakeManifests.outputs.manifestsBundle }}
#         images: |
#           ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}
#         imagepullsecrets: |
#           ${{ env.CLUSTERNAME }}dockerauth

    - name : Cleanup
      run: | 
        az logout
        rm -rf $GITHUB_WORKSPACE/kubeconfig
